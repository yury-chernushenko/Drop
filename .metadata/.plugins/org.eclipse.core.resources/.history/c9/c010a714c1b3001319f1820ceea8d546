package com.example.drop;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.ArrayList;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Environment;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class DrawingWidget extends View 
{

	private float mX, mY;
	private static final float TOUCH_TOLERANCE = 4;

	private Bitmap mBitmap;
	private Canvas mCanvas;
	private Paint mBitmapPaint;
	private Paint mPaint;
	private ArrayList <Integer> strokes;

	public DrawingWidget(Context c) 
	{
		super(c);

		mBitmap = Bitmap.createBitmap(900, 1100, Bitmap.Config.ARGB_8888);
		mCanvas = new Canvas(mBitmap);
		mBitmapPaint = new Paint(Paint.DITHER_FLAG);
		mPaint = new Paint();
		mPaint.setStrokeWidth(4);
		mBitmap.eraseColor(Color.WHITE);
		strokes = new ArrayList <Integer> ();
		invalidate();
	}
	

	public DrawingWidget(Context context, AttributeSet attr)
	{
		super(context,attr);
		mBitmap = Bitmap.createBitmap(900, 1100, Bitmap.Config.ARGB_8888);
		mCanvas = new Canvas(mBitmap);
		mBitmapPaint = new Paint(Paint.DITHER_FLAG);
		mPaint = new Paint();
		mPaint.setStrokeWidth(4);
		mPaint.setColor(Color.BLACK);
		mBitmap.eraseColor(Color.WHITE);
		strokes = new ArrayList <Integer> ();
		invalidate();
	}


	public DrawingWidget(Context context, AttributeSet attr, int defaultStyles)
	{
		super(context, attr, defaultStyles);
		
		mBitmap = Bitmap.createBitmap(900, 1100, Bitmap.Config.ARGB_8888);
		mCanvas = new Canvas(mBitmap);
		mBitmapPaint = new Paint(Paint.DITHER_FLAG);
		mPaint = new Paint();
		mPaint.setStrokeWidth(4);
		mPaint.setColor(Color.BLACK);
		mBitmap.eraseColor(Color.WHITE);
		strokes = new ArrayList <Integer> ();
		invalidate();
	}

	@Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) 
	{
		super.onSizeChanged(w, h, oldw, oldh);
	}

	@Override
	protected void onDraw(Canvas canvas) 
	{
		canvas.drawColor(0xFFAAAAAA);
		canvas.drawBitmap(mBitmap, 0, 0, mBitmapPaint);
	}


	private void touch_start(float x, float y) 
	{
		mX = x;
		mY = y;
		strokes.add((int)(x/4));
		strokes.add((int)(y/4));
	}

	private void touch_move(float x, float y) 
	{
		float dx = Math.abs(x - mX);
		float dy = Math.abs(y - mY);
		if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) 
		{
			mCanvas.drawLine(mX, mY, x, y, mPaint);
			mX = x;
			mY = y;
			if(Math.sqrt(Math.pow((strokes.get(strokes.size()-2)-x/4), 2)+Math.pow((strokes.get(strokes.size()-1)-y/4), 2)) > 4)
			{
				strokes.add((int)(x/4));
				strokes.add((int)(y/4));
			}
		}
	}
	
	private void touch_end(float x, float y) 
	{
		strokes.add((int)(x/4));
		strokes.add((int)(y/4));
		strokes.add(255);
		strokes.add(0);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) 
	{
		float x = event.getX();
		float y = event.getY();

		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			touch_start(x, y);
			invalidate();
			break;
		case MotionEvent.ACTION_MOVE:
			touch_move(x, y);
			invalidate();
			break;
		case MotionEvent.ACTION_UP:
				touch_end(x, y);
				break;
		}
		return true;
	}
	
	public void clearContents()
	{
		mBitmap = Bitmap.createBitmap(900, 1100, Bitmap.Config.ARGB_8888);
		mCanvas = new Canvas(mBitmap);
		mBitmap.eraseColor(Color.WHITE);
		invalidate();
	}
	
	public void setColor(int c)
	{
		mPaint.setColor(c);
	}
	
	public void setStrokeWidth(float w)
	{
		mPaint.setStrokeWidth(w);
	}
	
	public void setBitmap(Bitmap b)
	{
		mBitmap = convertToMutable(b);
		mCanvas = new Canvas(mBitmap);
		invalidate();
	}
	
	public int getColor()
	{
		return mPaint.getColor();
	}
	
	public float getStrokeWidth()
	{
		return mPaint.getStrokeWidth();
	}
	
	public Bitmap getBitmap()
	{
		return mBitmap;
	}
	
	public void resetStrokes()
	{
		strokes = new ArrayList <Integer> ();
	}
	public ArrayList <Integer> getStrokes()
	{
		return strokes;
	}
	
	public void setStrokes(ArrayList <Integer> s)
	{
		strokes = s;
	}
	
	/**
	 * Converts a immutable bitmap to a mutable bitmap. This operation doesn't allocates
	 * more memory that there is already allocated.
	 * 
	 * @param imgIn - Source image. It will be released, and should not be used more
	 * @return a copy of imgIn, but muttable.
	 */
	public static Bitmap convertToMutable(Bitmap imgIn) {
	    try {
	        //this is the file going to use temporally to save the bytes. 
	        // This file will not be a image, it will store the raw image data.
	        File file = new File(Environment.getExternalStorageDirectory() + File.separator + "temp.tmp");

	        //Open an RandomAccessFile
	        //Make sure you have added uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"
	        //into AndroidManifest.xml file
	        RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");

	        // get the width and height of the source bitmap.
	        int width = imgIn.getWidth();
	        int height = imgIn.getHeight();
	        Config type = imgIn.getConfig();

	        //Copy the byte to the file
	        //Assume source bitmap loaded using options.inPreferredConfig = Config.ARGB_8888;
	        FileChannel channel = randomAccessFile.getChannel();
	        MappedByteBuffer map = channel.map(MapMode.READ_WRITE, 0, imgIn.getRowBytes()*height);
	        imgIn.copyPixelsToBuffer(map);
	        //recycle the source bitmap, this will be no longer used.
	        imgIn.recycle();
	        System.gc();// try to force the bytes from the imgIn to be released

	        //Create a new bitmap to load the bitmap again. Probably the memory will be available. 
	        imgIn = Bitmap.createBitmap(width, height, type);
	        map.position(0);
	        //load it back from temporary 
	        imgIn.copyPixelsFromBuffer(map);
	        //close the temporary file and channel , then delete that also
	        channel.close();
	        randomAccessFile.close();

	        // delete the temp file
	        file.delete();

	    } catch (FileNotFoundException e) {
	        e.printStackTrace();
	    } catch (IOException e) {
	        e.printStackTrace();
	    } 

	    return imgIn;
	}
}